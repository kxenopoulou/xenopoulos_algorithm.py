import functools
import hashlib
import unittest
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Dropout, Rescaling, LSTM
from tensorflow.keras.models import Model

# --- Ορισμός Αρχικών Δακτυλικών Αποτυπωμάτων ---
THEORETICAL_FINGERPRINTS = {
    "xenopoulos_layer": "d6a7d9f8c4b3e2a1f5e4d3c2b1a0e9f",  # Παράδειγμα hash
    "NFI_GJ_Layer": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5",
    "NE1_G1_Layer": "p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0"
}

# --- Decorator για Αυτόματο Έλεγχο Ακεραιότητας ---
def enforce_theoretical_integrity(func):
    """
    Εξασφαλίζει ότι η θεωρητική βάση παραμένει αμετάβλητη πριν από τη δοκιμή.
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        for name, expected_hash in THEORETICAL_FINGERPRINTS.items():
            current_hash = calculate_fingerprint(globals()[name])
            if current_hash != expected_hash:
                raise RuntimeError(
                    f"Θεωρητική Αλλοίωση: Η '{name}' έχει hash {current_hash} αντί για {expected_hash}!"
                )
        return func(*args, **kwargs)
    return wrapper

# --- Βοηθητική Συνάρτηση για Υπολογισμό Hash ---
def calculate_fingerprint(entity):
    """
    Υπολογίζει το SHA-256 hash μιας συνάρτησης ή κλάσης.
    """
    if isinstance(entity, type):  # Για κλάσεις
        code = entity.__dict__["call"].__code__.co_code
    else:  # Για συναρτήσεις
        code = entity.__code__.co_code
    return hashlib.sha256(code).hexdigest()[:32]  # Πρώτα 32 ψηφία για ευκολία

# --- Θεωρητικές Συναρτήσεις & Κλάσεις ---
def xenopoulos_layer(data):
    """Xenopoulos Ultra Layer: Μείωση θορύβου με χρήση tanh."""
    return np.tanh(data)

class NFI_GJ_Layer(tf.keras.layers.Layer):
    """Εφαρμογή του τύπου N[Fi(Gj)] με εκπαιδεύσιμα α, β."""
    def __init__(self):
        super().__init__()
        self.alpha = tf.Variable(0.5, trainable=True)
        self.beta = tf.Variable(3.0, trainable=True)

    def call(self, inputs):
        Fi, Gj = inputs
        return Fi * (1 - Gj) + self.alpha * tf.exp(-self.beta * Gj)

class NE1_G1_Layer(tf.keras.layers.Layer):
    """Εφαρμογή του τύπου N[E1(G1)] με εκπαιδεύσιμο α."""
    def __init__(self):
        super().__init__()
        self.alpha = tf.Variable(0.5, trainable=True)

    def call(self, inputs):
        E1, G1 = inputs
        return E1 * (1 - G1**2) + self.alpha * tf.math.log(1 + E1)

# --- Unit Tests με Αυτόματο Έλεγχο ---
class TestQuantumSystem(unittest.TestCase):
    
    @enforce_theoretical_integrity
    def test_core_components(self):
        """Έλεγχος βασικών στοιχείων του συστήματος."""
        # Δοκιμή Xenopoulos Layer
        data = np.random.randn(10)
        self.assertTrue(np.allclose(xenopoulos_layer(data), np.tanh(data)))
        
        # Δοκιμή NFI_GJ_Layer
        layer = NFI_GJ_Layer()
        output = layer([tf.constant([1.0]), tf.constant([0.5])])
        self.assertGreater(float(output), 0.0)

# --- Εκτέλεση Δοκιμών & Ενημέρωση Hashes ---
if __name__ == "__main__":
    # Εκτύπωση τρεχόντων hashes για ενημέρωση
    print("\n--- Τρέχοντα Θεωρητικά Hashes ---")
    for name in THEORETICAL_FINGERPRINTS:
        print(f"{name}: {calculate_fingerprint(globals()[name])}")

    # Εκτέλεση όλων των δοκιμών
    unittest.main(argv=[''], exit=False)
